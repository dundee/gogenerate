package main

import (
	"os"
	"reflect"
	"regexp"
	"strings"
	"text/template"

	pb "github.com/dundee/gogenerate/protobuf"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

var msgs = []proto.Message{
	&pb.User{},
}

var templ = `// Code generated by cmd/gen. DO NOT EDIT.
package protobuf

import "github.com/dundee/gogenerate/pkg/log"

func (u *{{ .Name }}) MarshalLog() log.Fields {
	return log.Fields{
		{{- range $key, $val := .Fields }}
		"{{ $key }}":   u.{{ $val }},
		{{- end }}
	}
}`

type TemplateData struct {
	Name   string
	Fields map[string]string
}

func main() {
	nameReg := regexp.MustCompile(`name=([A-Za-z0-9_]+),`)
	template := template.Must(template.New("").Parse(templ))

	for _, msg := range msgs {
		logFields := map[string]string{}

		t := reflect.TypeOf(msg).Elem()
		desc := msg.ProtoReflect().Descriptor()

		descFields := desc.Fields()

		for i := 0; i < t.NumField(); i++ {
			f := t.Field(i)
			tag := f.Tag.Get("protobuf")
			if tag == "" {
				continue
			}

			name := nameReg.FindStringSubmatch(tag)[1]

			descf := descFields.ByName(protoreflect.Name(name))
			if proto.HasExtension(descf.Options(), pb.E_Key) {
				ex := proto.GetExtension(descf.Options(), pb.E_Key)
				if logKey, ok := ex.(string); ok {
					logFields[logKey] = f.Name
				}
			}
		}

		fileName := strings.ToLower(t.Name()) + "_gen.go"
		file, err := os.Create(fileName)
		if err != nil {
			panic(err)
		}

		err = template.Execute(file, TemplateData{Name: t.Name(), Fields: logFields})
		if err != nil {
			panic(err)
		}
		file.Close()
	}

}
